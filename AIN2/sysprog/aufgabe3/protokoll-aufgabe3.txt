------------------------------------------------------------------------------------------------------------------------
----------------------------------------T E S T   I N P U T-------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------
AIN/sysprog/aufgabe3 via  v12.2.0-gcc via  v17.0.9
❯ ./stringsort 200
Unsortiertes Array:
152 9 195 71 79 25 16 173 198 11 156 78 132 129 14 79 139 120 30 89 148 65 167 160 56 147 114 101 46 69 175 199 78 170 22 109 195 190 83 146 1 191 176 85 72 190 164 12 110 146 53 10 11 172 170 20 120 85 121 118 106 96 117 136 19 91 46 166 82 81 64 35 24 40 121 96 31 85 60 93 32 65 104 195 38 26 167 110 63 89 28 169 137 98 58 156 189 104 75 23 137 139 59 161 180 132 9 11 169 70 56 153 87 160 101 125 139 68 35 2 157 16 124 47 114 182 3 55 38 78 79 175 170 90 88 150 22 49 113 143 71 169 97 159 82 198 36 21 18 72 23 176 40 99 175 154 81 130 9 71 161 40 198 131 130 86 81 104 88 194 48 159 115 97 118 197 47 155 18 65 179 194 193 19 93 168 125 127 99 134 198 60 127 197 191 57 35 24 114 123
Sortiertes Feld:
1 10 101* 104** 106 109 11** 110* 113 114** 115 117 118* 12 120* 121* 123 124 125* 127* 129 130* 131 132* 134 136 137* 139** 14 143 146* 147 148 150 152 153 154 155 156* 157 159* 16* 160* 161* 164 166 167* 168 169** 170** 172 173 175** 176* 179 18* 180 182 189 19* 190* 191* 193 194* 195** 197* 198*** 199 2 20 21 22* 23* 24* 25 26 28 3 30 31 32 35** 36 38* 40** 46* 47* 48 49 53 55 56* 57 58 59 60* 63 64 65** 68 69 70 71** 72* 75 78** 79** 81** 82* 83 85** 86 87 88* 89* 9** 90 91 93* 96* 97* 98 99*

AIN/sysprog/aufgabe3 via  v12.2.0-gcc via  v17.0.9
❯ ./stringsort 0
Anzahl muss mindestens 1 sein

AIN/sysprog/aufgabe3 via  v12.2.0-gcc via  v17.0.9
❯ ./stringsort 1
Unsortiertes Array:
0
Sortiertes Feld:
0

AIN/sysprog/aufgabe3 via  v12.2.0-gcc via  v17.0.9
❯ ./stringsort 2
Unsortiertes Array:
1 0
Sortiertes Feld:
0 1

AIN/sysprog/aufgabe3 via  v12.2.0-gcc via  v17.0.9
❯ ./stringsort 20
Unsortiertes Array:
5 14 18 1 11 19 13 5 14 3 0 2 13 13 9 0 1 7 10 5
Sortiertes Feld:
0* 1* 10 11 13** 14* 18 19 2 3 5** 7 9

------------------------------------------------------------------------------------------------------------------------
----------------------------------------V A L G R I N D-------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------
AIN/sysprog/aufgabe3 via  v12.2.0-gcc via  v17.0.9
❯ valgrind ./stringsort 200
==1087059== Memcheck, a memory error detector
==1087059== Copyright (C) 2002-2022, and GNU GPL'd, by Julian Seward et al.
==1087059== Using Valgrind-3.19.0 and LibVEX; rerun with -h for copyright info
==1087059== Command: ./stringsort 200
==1087059==
Unsortiertes Array:
120 189 43 114 79 10 82 109 94 191 49 141 102 148 126 140 122 10 83 199 160 95 46 101 2 62 49 156 13 154 150 133 144 193 199 175 155 34 36 1 25 37 95 127 185 173 19 59 183 102 58 96 149 57 197 104 119 198 60 85 152 162 170 48 108 170 175 15 156 12 17 181 49 112 60 35 37 79 46 20 133 105 68 35 162 65 139 33 15 151 118 168 113 89 168 21 11 144 37 167 156 6 148 157 70 160 144 107 39 191 79 124 96 148 159 10 165 98 43 181 49 162 101 163 3 69 136 14 13 125 181 121 83 81 31 105 41 175 12 32 166 44 156 14 144 116 24 109 14 68 42 64 182 143 179 185 13 67 199 178 193 132 52 28 13 83 134 6 58 98 38 177 142 194 191 38 110 168 100 77 36 142 141 18 86 72 155 51 91 154 181 84 38 33 65 51 68 199 9 79
Sortiertes Feld:
1 10** 100 101* 102* 104 105* 107 108 109* 11 110 112 113 114 116 118 119 12* 120 121 122 124 125 126 127 13*** 132 133* 134 136 139 14** 140 141* 142* 143 144*** 148** 149 15* 150 151 152 154* 155* 156*** 157 159 160* 162** 163 165 166 167 168** 17 170* 173 175** 177 178 179 18 181*** 182 183 185* 189 19 191** 193* 194 197 198 199*** 2 20 21 24 25 28 3 31 32 33* 34 35* 36* 37** 38** 39 41 42 43* 44 46* 48 49*** 51* 52 57 58* 59 6* 60* 62 64 65* 67 68** 69 70 72 77 79*** 81 82 83** 84 85 86 89 9 91 94 95* 96* 98*
==1087059==
==1087059== HEAP SUMMARY:
==1087059==     in use at exit: 0 bytes in 0 blocks
==1087059==   total heap usage: 203 allocs, 203 frees, 4,224 bytes allocated
==1087059==
==1087059== All heap blocks were freed -- no leaks are possible
==1087059==
==1087059== For lists of detected and suppressed errors, rerun with: -s
==1087059== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)

------------------------------------------------------------------------------------------------------------------------
----------------------------------------T E S T   I N P U T   O P T I M I E R T-----------------------------------------
------------------------------------------------------------------------------------------------------------------------
AIN/sysprog/aufgabe3 via  v12.2.0-gcc via  v17.0.9
❯ make TARGET=stringsort-optimiert
gcc -g -Wall -Wextra -Werror -Wvla -std=c11 -pedantic    stringsort-optimiert.c   -o stringsort-optimiert

AIN/sysprog/aufgabe3 via  v12.2.0-gcc via  v17.0.9
❯ ./stringsort-optimiert 200
Unsortiertes Array:d)  …tringsort-optimiert  (command)
43 156 44 180 11 12 44 47 146 88 66 4 131 44 141 80 24 129 199 109 91 118 142 75 113 144 120 67 7 12 43 50 120 39 183 131 52 27 130 198 67 148 155 150 192 48 30 168 129 29 78 20 148 172 48 13 68 168 80 75 133 75 78 53 114 61 137 118 40 67 69 59 16 24 9 160 72 39 129 1 20 159 174 120 131 22 133 0 142 165 75 75 192 105 129 59 166 18 177 158 37 46 17 5 70 26 166 94 17 95 48 190 6 22 62 137 196 148 137 138 113 165 14 58 70 95 117 189 65 94 147 102 141 117 108 163 143 26 10 113 73 58 55 79 32 117 16 180 65 106 70 131 23 36 189 45 83 106 186 148 0 134 51 93 3 111 9 98 137 171 11 10 29 66 89 13 136 57 145 1 163 15 132 138 4 121 184 87 179 170 36 180 56 87 25 59 150 34 158 39
Sortiertes Feld:
0* 1* 10* 102 105 106* 108 109 11* 111 113** 114 117** 118* 12* 120** 121 129*** 13* 130 131*** 132 133* 134 136 137*** 138* 14 141* 142* 143 144 145 146 147 148*** 15 150* 155 156 158* 159 16* 160 163* 165* 166* 168* 17* 170 171 172 174 177 179 18 180** 183 184 186 189* 190 192* 196 198 199 20* 22* 23 24* 25 26* 27 29* 3 30 32 34 36* 37 39** 4* 40 43* 44** 45 46 47 48** 5 50 51 52 53 55 56 57 58* 59** 6 61 62 65* 66* 67** 68 69 7 70** 72 73 75**** 78* 79 80* 83 87* 88 89 9* 91 93 94* 95* 98

AIN/sysprog/aufgabe3 via  v12.2.0-gcc via  v17.0.9
❯ ./stringsort-optimiert 0
Anzahl muss mindestens 1 sein

AIN/sysprog/aufgabe3 via  v12.2.0-gcc via  v17.0.9
❯ ./stringsort-optimiert 1
Unsortiertes Array:
0
Sortiertes Feld:
0

AIN/sysprog/aufgabe3 via  v12.2.0-gcc via  v17.0.9
❯ ./stringsort-optimiert 2
Unsortiertes Array:
1 0
Sortiertes Feld:
0 1

AIN/sysprog/aufgabe3 via  v12.2.0-gcc via  v17.0.9
❯ ./stringsort-optimiert 20
Unsortiertes Array:
15 8 8 11 10 3 7 5 8 8 0 8 2 14 16 11 18 6 14 16
Sortiertes Feld:
0 10 11* 14* 15 16* 18 2 3 5 6 7 8****

------------------------------------------------------------------------------------------------------------------------
----------------------------------------V A L G R I N D   O P T I M I E R T---------------------------------------------
------------------------------------------------------------------------------------------------------------------------
AIN/sysprog/aufgabe3 via  v12.2.0-gcc via  v17.0.9
❯ valgrind ./stringsort-optimiert 200
==1088106== Memcheck, a memory error detector
==1088106== Copyright (C) 2002-2022, and GNU GPL'd, by Julian Seward et al.
==1088106== Using Valgrind-3.19.0 and LibVEX; rerun with -h for copyright info
==1088106== Command: ./stringsort-optimiert 200
==1088106==
Unsortiertes Array:
48 23 69 66 128 48 175 181 108 52 0 195 42 181 172 0 52 3 52 10 176 121 194 13 161 125 37 195 44 160 28 44 135 97 110 63 146 85 196 6 89 196 153 132 129 126 132 133 129 136 144 57 57 138 23 170 15 60 166 59 20 146 103 107 43 13 170 141 50 167 100 140 115 53 24 197 131 108 130 12 45 26 22 102 164 45 73 179 57 191 190 29 137 93 136 132 58 106 26 109 25 78 1 93 83 177 42 15 85 124 179 130 151 1 185 115 198 58 47 55 1 37 36 90 83 172 174 141 79 152 2 56 30 155 101 114 132 143 81 18 68 12 148 19 166 85 86 164 95 85 172 96 123 8 138 158 181 113 99 12 17 102 20 48 57 122 114 142 17 147 160 37 159 60 56 125 146 95 90 41 180 14 90 55 22 28 13 155 93 65 167 111 119 140 111 128 62 177 70 31
Sortiertes Feld:
0* 1** 10 100 101 102* 103 106 107 108* 109 110 111* 113 114* 115* 119 12** 121 122 123 124 125* 126 128* 129* 13** 130* 131 132*** 133 135 136* 137 138* 14 140* 141* 142 143 144 146** 147 148 15* 151 152 153 155* 158 159 160* 161 164* 166* 167* 17* 170* 172** 174 175 176 177* 179* 18 180 181** 185 19 190 191 194 195* 196* 197 198 2 20* 22* 23* 24 25 26* 28* 29 3 30 31 36 37** 41 42* 43 44* 45* 47 48** 50 52** 53 55* 56* 57*** 58* 59 6 60* 62 63 65 66 68 69 70 73 78 79 8 81 83* 85*** 86 89 90** 93** 95* 96 97 99
==1088106==
==1088106== HEAP SUMMARY:
==1088106==     in use at exit: 0 bytes in 0 blocks
==1088106==   total heap usage: 4 allocs, 4 frees, 2,628 bytes allocated
==1088106==
==1088106== All heap blocks were freed -- no leaks are possible
==1088106==
==1088106== For lists of detected and suppressed errors, rerun with: -s
==1088106== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)

------------------------------------------------------------------------------------------------------------------------
----------------------------------------Z E I T V E R G L E I C H-------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------
AIN/sysprog/aufgabe3 via  v12.2.0-gcc via  v17.0.9
❯ time ./stringsort 20000 > /dev/null

________________________________________________________
Executed in    4.14 secs    fish           external
   usr time    4.13 secs  786.00 micros    4.13 secs
   sys time    0.00 secs    0.00 micros    0.00 secs


AIN/sysprog/aufgabe3 via  v12.2.0-gcc via  v17.0.9 took 4s
❯ time ./stringsort-optimiert 20000 > /dev/null

________________________________________________________
Executed in    4.47 secs    fish           external
   usr time    4.47 secs  788.00 micros    4.47 secs
   sys time    0.00 secs    0.00 micros    0.00 secs

------------------------------------------------------------------------------------------------------------------------
----------------------------------------T E S T   I N P U T   J A V A---------------------------------------------------
------------------------------------------------------------------------------------------------------------------------
AIN/sysprog/aufgabe3 via  v12.2.0-gcc via  v17.0.9 took 4s
❯ java Stringsort 200
Unsortiertes Array:
40 79 4 197 5 106 17 198 11 76 169 37 57 128 176 127 184 146 147 189 151 156 161 78 141 135 103 196 170 61 0 52 161 45 71 96 166 169 75 146 56 178 198 174 3 43 57 186 174 186 96 106 108 3 77 35 48 183 52 170 146 170 195 109 8 185 67 174 43 74 55 56 16 38 144 26 23 9 26 89 19 187 39 99 54 30 70 189 144 7 152 53 109 194 94 116 33 119 90 179 16 1 185 70 69 76 114 54 15 14 46 89 83 22 28 20 178 89 143 80 65 4 46 98 119 28 176 165 174 153 17 82 113 193 38 199 174 160 97 142 119 157 193 28 19 73 58 178 149 176 180 136 166 81 82 53 19 42 18 36 197 181 36 144 25 103 120 191 132 15 153 189 125 4 120 16 159 22 166 112 57 71 33 97 163 99 90 105 135 194 193 173 106 134 94 128 166 47 141 139
Sortiertes Array:
0 1 103* 105 106** 108 109* 11 112 113 114 116 119** 120* 125 127 128* 132 134 135* 136 139 14 141* 142 143 144** 146** 147 149 15* 151 152 153* 156 157 159 16** 160 161* 163 165 166*** 169* 17* 170** 173 174**** 176** 178** 179 18 180 181 183 184 185* 186* 187 189** 19** 191 193** 194* 195 196 197* 198* 199 20 22* 23 25 26* 28** 3* 30 33* 35 36* 37 38* 39 4** 40 42 43* 45 46* 47 48 5 52* 53* 54* 55 56* 57** 58 61 65 67 69 7 70* 71* 73 74 75 76* 77 78 79 8 80 81 82* 83 89** 9 90* 94* 96* 97* 98 99*

AIN/sysprog/aufgabe3 via  v12.2.0-gcc via  v17.0.9
❯ java Stringsort 0
Anzahl muss midestens 1 sein

AIN/sysprog/aufgabe3 via  v12.2.0-gcc via  v17.0.9
❯ java Stringsort 1
Unsortiertes Array:
0
Sortiertes Array:
0

AIN/sysprog/aufgabe3 via  v12.2.0-gcc via  v17.0.9
❯ java Stringsort 2
Unsortiertes Array:
0 1
Sortiertes Array:
0 1

AIN/sysprog/aufgabe3 via  v12.2.0-gcc via  v17.0.9
❯ java Stringsort 20
Unsortiertes Array:
6 18 12 14 8 15 17 18 8 2 8 4 9 4 18 1 0 18 13 1
Sortiertes Array:
0 1* 12 13 14 15 17 18*** 2 4* 6 8** 9

------------------------------------------------------------------------------------------------------------------------
----------------------------------------F R A G E N---------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------
***Stringendezeichen '\0': Warum ist das ein sinnvoller Wert?***
    m = strlen(argv[1]) + 1 reserviert Speicher für die maximale Anzahl von Ziffern, die die erzeugten
    zufälligen Zahlen haben können, und fügt zusätzlich Platz für das Null-Ende-Zeichen ('\0') hinzu.

***Verhält sich das C-Programm bei allen Eingaben wie das Java-Programm?***
    Nein, bei Text Eingaben wirft Java eine Exception.

***Ist das speicher-optimierte Programm schneller als das nicht optimierte?***
    Nein. Die Speicherallokierung ist in der optimierten Version zwar kompakter, aber die Methoden
    memcpy und memcmp dauern längern, dazu das vertauschen von Bytes.

